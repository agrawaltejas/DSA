# 1st self solution : TC = O(N) SC = O(N)

class Solution:
    def singleNumber(self, nums: List[int]) -> int:

        # nums = [4,1,2,1,2]

        dic = {}

        n = len(nums)

        for num in nums :
            if num in dic : 
                dic[num] +=1 
            else : 
                dic[num] = 1 

        print(dic) 

        for key,value in dic.items() :
            if value == 1 :
                return key

# 2ND METHOD . TC = O(N) SC = O(1) . Using XOR

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        """
        Given a non-empty array of integers nums, every element appears twice except for one.
        Find that single one.
        """
        # We'll use the XOR operator to find the single number that appears only once
        # XORing a number with itself gives 0, so all the pairs will cancel each other out
        # The result will be the number that appears only once
        result = 0
    
        # XOR all the numbers in the list
        for num in nums:
            result ^= num
    
        return result

'''
https://leetcode.com/problems/single-number/description/

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1

'''